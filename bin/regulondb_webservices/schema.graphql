# _
type ActiveConformation {
  # _
  _id: String

  # _
  name: String

  # _
  type: String
}

type AdditiveEvidences {
  # _
  category: String

  # _
  code: String

  # _
  type: String
}

# _
type AligmentMatrix {
  # _
  aligment: String

  # _
  consensus: String

  # _
  matrix: String

  # _
  urlMatrixQualityResult: String

  # _
  urlPWMLogo: String
}

# _
type Arrangement {
  # _
  promoters: [simpleType]

  # _
  regulators: [Regulators]

  # _
  transcriptionUnit: simpleType
}

type AssociatedPhrases {
  phrase: String
  phraseId: String
  pmid: String
}

type AssociatedProperty {
  name: String
  value: String
}

# _
type BindsSigmaFactor {
  # _
  _id: String

  # _
  abbreviatedName: String

  # _
  citations: [Citations]

  # _
  name: String
}

# _
type BiologicalProcess {
  # _
  _id: String

  # _
  citations: [Citations]

  # _
  name: String

  # _
  productsIds: [String]
}

# _
type Boxes {
  # _
  leftEndPosition: Int

  # _
  rightEndPosition: Int

  # _
  sequence: String

  # _
  type: String
}

# _
type CellularComponent {
  # _
  _id: String

  # _
  citations: [Citations]

  # _
  name: String

  # _
  productsIds: [String]
}

# _
type Citations {
  # _
  evidence: Evidence

  # _
  publication: Publication
}

type CoexpressedGenes {
  # id of the gene
  _id: String

  # tag of the gene
  locusTag: String

  # name of the gene
  name: String
}

# CoexpressionData is the principal type on the service
type CoexpressionData {
  # id of the coexpression element
  _id: String

  # list of genes in the coexpression
  gene: [CoexpressedGenes]

  # organism information
  organism: Organism

  # rank of the match between both elements
  rank: Float

  # rgb code color for coexpression
  rgbColor: String
}

# _
type Components {
  # _
  function: String

  # _
  name: String

  # _
  type: String
}

# _
type Conformations {
  # _
  _id: String

  # _
  additiveEvidences: [AdditiveEvidences]

  # _
  citations: [Citations]

  # _
  class: String

  # _
  confidenceLevel: String

  # _
  effector: [simpleType]

  # _
  effectorInteractionType: String

  # _
  functionalType: String

  # _
  name: String

  # _
  note: String

  # _
  type: String
}

type ContactType {
  # _
  email: String

  # _
  person: String

  # _
  webPage: String
}

# DTTData type is principal type on the service
type DTTData {
  # id of the element object
  _id: String

  # _
  citations: [Citations]

  # Font of the label
  labelFont: String

  # Name of the genetic element drawed
  labelName: String

  # Color of the label in RGB value
  labelRGBColor: String

  # Size of the label that deploys in the page
  labelSize: Int

  # Beginning of element position
  leftEndPosition: String

  # Color of the line drawed in RGB value
  lineRGBColor: String

  # Type of the line
  lineType: Int

  # Width of the line
  lineWidth: Int

  # Objects that don't have position
  linkedObjectWhenNoPositions: linkedObjectWhenNoPositionsType

  # RGB value to paint the element
  objectRGBColor: String

  # Type of the element to draw
  objectType: String

  # Name of the drawed organism
  organism: organismType

  # Genes related to the elements
  relatedGenes: [relatedGenesType]

  # Ending of element position
  rightEndPosition: String

  # Direction of the genetic element
  strand: String

  # Description of the genetic element drawed
  tooltip: String
}

# This is a Dataset type
type Dataset {
  # _
  _id: String

  # _
  assemblyGenomeId: String

  # _
  cutOff: Float

  # _
  datasetType: String

  # _
  experimentCondition: String

  # _
  externalReferences: [ExternalReferences]

  # _
  fivePrimeEnrichment: String

  # _
  geneExpressionFiltered: String

  # _
  growthConditions: HTGrowthCondition

  # _
  linkedDataset: LinkedDataset

  # _
  nlpGrowthConditionsId: String

  # _
  notes: String

  # _
  objectsTested: [ObjectTested]

  # _
  publications: [DatasetPublication]

  # _
  referenceGenome: String

  # _
  releaseDataControl: ReleaseDataControl

  # _
  sample: DatasetSample

  # _
  sourceReferenceGenome: String

  # _
  sourceSerie: SourceSerie

  # _
  summary: DatasetSummary

  # _
  temporalId: String
}

# _
type DatasetPublication {
  # _
  abstract: String

  # _
  authors: [String]

  # _
  date: String

  # _
  doi: String

  # _
  pmcid: String

  # _
  pmid: Int

  # _
  title: String
}

# _
type DatasetSample {
  # _
  controlId: [String]

  # _
  experimentId: [String]

  # _
  srrId: String

  # _
  title: String
}

# _
type DatasetSummary {
  # _
  totalOfGenes: totalOf

  # _
  totalOfPeaks: totalOf

  # _
  totalOfTFBS: totalOf
}

# _
type DatasetTFBinding {
  # _
  _id: String

  # _
  chrLeftPosition: Int

  # _
  chrRightPosition: Int

  # _
  chromosome: String

  # _
  closestGenes: [TFClosestGenes]

  # _
  datasetIds: [String]

  # _
  foundRIs: [RIObjectType]

  # _
  nameCollection: String

  # _
  peakId: String

  # _
  score: Float

  # _
  sequence: String

  # _
  strand: String

  # _
  temporalId: String
}

scalar Date

type DownloadableFile {
  # _
  _id: String

  # _
  citation: String

  # _
  columnsDetails: String

  # _
  contact: ContactType

  # _
  content: String

  # _
  creationDate: String

  # _
  description: String

  # _
  fileFormat: String

  # _
  fileName: String

  # _
  group: String

  # _
  license: String

  # _
  rdbVersion: String

  # _
  version: String
}

# _
type EncodedBy {
  # _
  genes: [EncodedGenes]

  # _
  operon: [EncodedOperon]
}

# _
type EncodedGenes {
  # _
  _id: String

  # _
  leftEndPosition: Int

  # _
  length: String

  # _
  name: String

  # _
  rightEndPosition: Int
}

# _
type EncodedOperon {
  # _
  _id: String

  # _
  name: String

  # _
  tusEncodingRegulator: [TusEncodingRegulator]
}

# _
type Evidence {
  # _
  _id: String

  # _
  additiveEvidenceCodeRule: Int

  # _
  code: String

  # _
  name: String

  # _
  type: String
}

# _
type EvolutionaryConservation {
  # _
  urlPromoterTargetGene: String

  # _
  urlRegulatorTargetGene: String
}

# _
type ExternalCrossReferences {
  # _
  externalCrossReferenceId: String

  # _
  externalCrossReferenceName: String

  # _
  objectId: String

  # _
  url: String
}

# _
type ExternalReferences {
  # _
  description: String

  # _
  name: String

  # _
  note: String

  # _
  url: String
}

# _
type FirstGene {
  # _
  _id: String

  # _
  distanceToPromoter: Float

  # _
  name: String
}

# _
type Fragments {
  # _
  _id: String

  # _
  centisomePosition: String

  # _
  leftEndPosition: Int

  # _
  name: String

  # _
  rightEndPosition: Int

  # _
  sequence: String
}

# First Level of the collection
type GOTree {
  # _
  _id: String

  # _
  description: String

  # _
  genes: [geneMembers]

  # _
  name: String

  # _
  ontologyId: String

  # _
  subclassOf: [String]

  # _
  subclasses: [String]
}

# _
type GUGeneOntology {
  # _
  biologicalProcess: [simpleType]

  # _
  cellularComponent: [simpleType]

  # _
  molecularFunction: [simpleType]
}

type GUResult {
  # contains server response
  data: [GensorUnitDatamart]

  # contains pagination info
  pagination: Pagination
}

# This contains all data of Gene properties
type Gene {
  #
  _id: String

  # _
  bnumber: String

  # _
  centisomePosition: Float

  # _
  citations: [Citations]

  # _
  externalCrossReferences: [ExternalCrossReferences]

  # _
  fragments: [Fragments]

  # _
  gcContent: Float

  # _
  leftEndPosition: Int

  # _
  multifunTerms: [MultifunTerms]

  # _
  name: String

  # _
  note: String

  # _
  rightEndPosition: Int

  # _
  sequence: String

  # _
  strand: String

  # _
  synonyms: [String]

  # _
  type: String
}

# _
type GeneExpression {
  # _
  _id: String

  # _
  count: Float

  # _
  datasetIds: [String]

  # _
  fpkm: Float

  # _
  gene: GeneGe

  # _
  temporalId: String

  # _
  tpm: Float
}

# _
type GeneGe {
  # _
  _id: String

  # _
  bnumber: String

  # _
  leftEndPosition: Int

  # _
  name: String

  # _
  rightEndPosition: Int

  # _
  synonyms: [String]
}

# _
type GeneOntologyTerms {
  # _
  biologicalProcess: [BiologicalProcess]

  # _
  cellularComponent: [CellularComponent]

  # _
  molecularFunction: [MolecularFunction]
}

# _
type GeneTermsObject {
  # _
  _id: String

  # _
  name: String
}

# _
type Genes {
  # _
  _id: String

  # _
  name: String

  # _
  regulatorBindingSites: [RegulatorBindingSites]
}

# This type contains all data retrieved by server and
# pagination info for better control of the responses
type GenesResult {
  # contains server response
  data: [geneDatamart]

  # contains pagination info
  pagination: Pagination
}

# _
type GensorUnit {
  # _
  _id: String

  # _
  components: [Components]

  # _
  description: String

  # _
  geneOntology: GUGeneOntology

  # _
  groups: [String]

  # _
  name: String

  # _
  note: String

  # _
  signalName: [String]
}

# _
type GensorUnitDatamart {
  # _
  _id: String

  # _
  gensorUnit: GensorUnit

  # _
  reactions: [Reactions]

  # _
  schemaVersion: String

  # _
  totalOfComponents: Int

  # _
  totalOfReactions: Int
}

# _
type GrowthConditions {
  # _
  _id: String

  # _
  citations: [Citations]

  # _
  controlCondition: String

  # _
  effect: String

  # _
  experimentalCondition: String
}

# _
type HTGrowthCondition {
  # _
  aeration: String

  # _
  aerationSpeed: String

  # _
  geneticBackground: String

  # _
  growthPhase: String

  # _
  growthRate: String

  # _
  medium: String

  # _
  mediumSupplements: String

  # _
  opticalDensity: String

  # _
  organism: String

  # _
  otherTerms: [String]

  # _
  ph: String

  # _
  pressure: String

  # _
  temperature: String

  # _
  vesselType: String
}

# _
type HTtranscriptionTerminationSite {
  # _
  _id: String

  # _
  chromosome: String

  # _
  closestGenes: [TTSClosestGenes]

  # _
  datasetIds: [String]

  # _
  leftEndPosition: Int

  # _
  name: String

  # _
  rightEndPosition: Int

  # _
  strand: String

  # _
  temporalId: String

  # _
  terminator: [TTSTerminator]
}

# _
type HtTSS {
  # _
  _id: String

  # _
  chromosome: String

  # _
  closestGenes: [TSSClosestGenes]

  # _
  datasetIds: [String]

  # _
  leftEndPosition: Int

  # _
  pos_1: Int

  # _
  promoter: [TSSPromoter]

  # _
  rightEndPosition: Int

  # _
  strand: String
}

# _
type HtTranscriptionUnit {
  # _
  _id: String

  # _
  chromosome: String

  # _
  datasetIds: [String]

  # _
  genes: [TUGenes]

  # _
  leftEndPosition: Int

  # _
  length: Int

  # _
  name: String

  # _
  phantom: Int

  # _
  pseudo: Int

  # _
  rightEndPosition: Int

  # _
  strand: String

  # _
  temporalId: String

  # _
  termType: String
}

# _
type LinkedDataset {
  # _
  controlId: [String]

  # _
  datasetType: String

  # _
  experimentId: [String]
}

type ListServiceStatistics {
  # _
  cotranscriptionFactors: Int

  # _
  genes: Int

  # _
  promoters: Int

  # _
  sigmaFactors: Int

  # _
  sites: Int

  # _
  transcriptionFactors: Int

  # _
  transcriptionUnits: Int
}

# _
type LocalDataType {
  # _
  note: String

  # _
  responsible: [String]

  # _
  sourceName: String

  # _
  type: String

  # _
  version: String
}

# _
type MetadataType {
  # _
  _id: String

  # _
  datasetType: String

  # _
  metadataContent: String

  # _
  status: String
}

# _
type MolecularFunction {
  # _
  _id: String

  # _
  citations: [Citations]

  # _
  name: String

  # _
  productsIds: [String]
}

# _
type Motifs {
  # _
  _id: String

  # _
  citations: [Citations]

  # _
  dataSource: String

  # _
  description: String

  # _
  leftEndPosition: Int

  # _
  note: String

  # _
  rightEndPosition: Int

  # _
  sequence: String

  # _
  type: String
}

# _
type Multifun {
  # _
  _id: String

  # _
  geneIds: [String]

  # _
  name: String
}

# _
type MultifunTerms {
  # _
  _id: String

  # _
  label: String

  # _
  name: String
}

type Mutation {
  # #### Type
  # Data
  # #### Service
  # Recent Queries
  # #### Name
  # addUsedQuery
  # #### Description
  # Add a new string of used query to collection, if query was used previously, increases usedTimes property
  # #### Example
  # ```json
  # {
  #     addUsedQuery(querySearchString="usedString")
  #     {
  #         _id
  #         querySearchString
  #         dateOfUse
  #         usedTimes
  #     }
  # }
  # ```
  addUsedQuery(
    # #### Description
    # Indicates string to be inserted in collection
    # #### Required
    # Required
    querySearchString: String!
  ): recentQuery
}

# _
type NLPGrowthConditions {
  # _
  _id: String

  # _
  additionalProperties: [nlpGCAdditionalProperties]

  # _
  aeration: [nlpGCProperties]

  # _
  aerationSpeed: [nlpGCProperties]

  # _
  datasetIds: [String]

  # _
  geneticBackground: [nlpGCProperties]

  # _
  growthPhase: [nlpGCProperties]

  # _
  growthRate: [nlpGCProperties]

  # _
  medium: [nlpGCProperties]

  # _
  mediumSupplements: [nlpGCProperties]

  # _
  opticalDensity: [nlpGCProperties]

  # _
  organism: [nlpGCProperties]

  # _
  ph: [nlpGCProperties]

  # _
  pressure: [nlpGCProperties]

  # _
  temperature: [nlpGCProperties]

  # _
  temporalId: String

  # _
  vesselType: [nlpGCProperties]
}

# _
type Node {
  # _
  _id: String

  # _
  citations: [Citations]

  # _
  name: String

  # _
  networkType: String

  # _
  regulatoryEffect: String

  # _
  tooltip: String

  # _
  type: String
}

# _
type ObjectTested {
  # _
  _id: String

  # _
  abbreviatedName: String

  # _
  activeConformations: [String]

  # _
  externalCrossReferences: [ExternalCrossReferences]

  # _
  genes: [objectTestedGene]

  # _
  name: String

  # _
  note: String

  # _
  synonyms: [String]
}

# _
type Operon {
  # _
  _id: String

  # _
  citations: [Citations]

  # _
  name: String

  # _
  regulationPositions: RegulationPositions

  # _
  statistics: OperonStatistics

  # _
  strand: String
}

# This type contains operon and pagination
# data obtained by the query
type OperonResult {
  # contains server response
  data: [operonDatamart]

  # contains pagination info
  pagination: Pagination
}

# _
type OperonStatistics {
  # _
  genes: Int

  # _
  promoters: Int

  # _
  transcriptionUnits: Int
}

# _
type Organism {
  # _
  _id: String

  # _
  name: String
}

type Overview {
  getAllObjectInfo: [overviewInfoType]
  getOverview(_id: String): overviewInfoType
}

# Contans info about Pagination for better control in responses
type Pagination {
  # Is the current page of showed results
  currentPage: Int

  # Indicates to user which is the first page of results (0 by default)
  firstPage: Int

  # Tells to user if there is another page of results
  hasNextPage: Boolean

  # Indicates to uer which is the last page of results
  lastPage: Int

  # Indicates limit that query has made it
  limit: Int

  # Indicates the total results got by the query
  totalResults: Int
}

# _
type Peaks {
  # _
  _id: String

  # _
  chromosome: String

  # _
  closestGenes: [PeaksClosestGenes]

  # –
  datasetIds: [String]

  # _
  name: String

  # _
  peakLeftPosition: Int

  # _
  peakRightPosition: Int

  # _
  score: Float

  # _
  siteIds: [String]

  # _
  temporalId: String
}

# _
type PeaksClosestGenes {
  # _
  _id: String

  # _
  distanceTo: Float

  # _
  name: String

  # _
  productName: [String]
}

type Phrases {
  _id: String
  name: String
  objectType: String
  propertyPhrases: [propertyPhrases]
  sourceId: String
}

# _
type Platform {
  # _
  _id: String

  # _
  title: String
}

# _
type Products {
  # _
  _id: String

  # _
  abbreviatedName: String

  # _
  anticodon: String

  # _
  cellularLocations: [String]

  # _
  citations: [Citations]

  # _
  externalCrossReferences: [ExternalCrossReferences]

  # _
  geneOntologyTerms: GeneOntologyTerms

  # _
  isRegulator: Boolean

  # _
  isoelectricPoint: Float

  # _
  molecularWeight: String

  # _
  motifs: [Motifs]

  # _
  name: String

  # _
  note: String

  # _
  regulonId: String

  # _
  sequence: String

  # _
  synonyms: [String]

  # _
  type: String
}

# _
type Promoter {
  # _
  _id: String

  # _
  additiveEvidences: [AdditiveEvidences]

  # _
  bindsSigmaFactor: BindsSigmaFactor

  # _
  boxes: [Boxes]

  # _
  citations: [Citations]

  # _
  confidenceLevel: String

  # _
  name: String

  # _
  note: String

  # _
  regulatorBindingSites: [RegulatorBindingSites]

  # _
  score: String

  # _
  sequence: String

  # _
  synonyms: [String]

  # _
  transcriptionStartSite: TranscriptionStartSite
}

# _
type Publication {
  # _
  _id: String

  # _
  authors: [String]

  # _
  citation: String

  # _
  pmid: String

  # _
  title: String

  # _
  url: String

  # _
  year: Int
}

type Query {
  # #### Type
  # Data
  # #### Service
  # Gensor Unit
  # #### Name
  # getAllGUs
  # #### Description
  # List all the Gensor Unit contained in collection
  # #### Example
  # ```json
  # {
  #   getAllGUs(limit:5)
  #   {
  #     data{
  #       gensorUnit{
  #         _id
  #         name
  #         signalName
  #       }
  #     }
  #   }
  # }
  # ```
  getAllGUs(
    # #### Description
    # defines the page results showed
    # #### Required
    # Optional
    limit: Int

    # #### Description
    # select the current result page
    # #### Required
    # Optional
    page: Int = 0
  ): GUResult!

  # #### Type
  # HT Data
  # #### Service
  # HT Gene Expression
  # #### Name
  # getAllGeneExpressionOfDataset
  # #### Description
  # Gets all GeneExpression docs associated to datasetID
  # #### Example
  # ```json
  # {
  #     getAllGeneExpressionOfDataset(datasetId:"GENE_EXPRESSION_SRR057747")
  #     {
  #         _id
  #         gene {
  #             _id
  #             name
  #             bnumber
  #         }
  #         fpkm
  #         datasetIds
  #     }
  # }
  # ```
  getAllGeneExpressionOfDataset(
    # #### Description
    # Id of the dataset associated to Gene Expression
    # #### Required
    # Required
    datasetId: String

    # #### Description
    # defines the page results showed
    # #### Required
    # Optional
    limit: Int = 10

    # #### Description
    # select the current result page
    # #### Required
    # Optional
    page: Int = 0
  ): [GeneExpression]

  # #### Type
  # Data
  # #### Service
  # Gene
  # #### Name
  # getAllGenes
  # #### Description
  # List all the genes contained in collection
  # #### Example
  # ```json
  # {
  #   getAllGenes(limit:5){
  #     data{
  #       gene{
  #         _id
  #         name
  #         leftEndPosition
  #         rightEndPosition
  #       }
  #     }
  #   }
  # }
  # ```
  getAllGenes(
    # #### Description
    # defines the page results showed
    # #### Required
    # Optional
    limit: Int

    # #### Description
    # select the current result page
    # #### Required
    # Optional
    page: Int = 0
  ): GenesResult!

  # #### Type
  # Tools
  # #### Service
  # RegulatoryNetwork
  # #### Name
  # getAllNodes
  # #### Description
  # List all the nodes of RegulatoryNetwork
  # #### Example
  # ```json
  # {
  #     getAllNodes(networkType: "TF-TF" objectType: "Transcription Factor"){
  #         _id
  #         name
  #         type
  #         indegree{
  #         _id
  #         name
  #         type
  #         networkType
  #         regulatoryEffect
  #         }
  #     }
  # }
  # ```
  getAllNodes(
    # #### Description
    # defines the network type to be showed on results of indegree or outdegree
    # #### Required
    # Optional
    networkType: String

    # #### Description
    # defines the object type to be obtained
    # #### Required
    # Optional
    objectType: String
  ): [RegulatoryNetwork]

  # #### Type
  # Data
  # #### Service
  # Overviews
  # #### Name
  # getAllObjectInfo
  # #### Description
  # Lists all existing items within the collection
  # #### Example
  # ```json
  # {
  #   getAllObjectInfo{
  #     _id
  #     queryName
  #     objectType
  #     graph{
  #       title
  #       description
  #       labelX
  #       labelY
  #     }
  #     data{
  #       xAxis
  #       yAxis
  #     }
  #   }
  # }
  # ```
  getAllObjectInfo: [overviewInfoType]

  # #### Type
  # Data
  # #### Service
  # Operon
  # #### Name
  # getAllOperon
  # #### Description
  # List all the operon objects contained in collection
  # #### Example
  # ```json
  # {
  #   getAllOperon(limit:5){
  #     data{
  #       operon{
  #         _id
  #         name
  #         strand
  #       }
  #       transcriptionUnits{
  #         _id
  #         name
  #       }
  #     }
  #   }
  # }
  # ```
  getAllOperon(
    # #### Description
    # defines the page results showed
    # #### Required
    # Optional
    limit: Int

    # #### Description
    # select the current result page
    # #### Required
    # Optional
    page: Int = 0
  ): OperonResult!

  # #### Type
  # HT Data
  # #### Service
  # HT Peaks
  # #### Name
  # getAllPeaksOfDataset
  # #### Description
  # Gets all peaks docs associated to datasetID
  # #### Example
  # ```json
  # {
  #     getAllPeaksOfDataset(datasetId:"RHTECOLIBSD00336")
  #     {
  #         _id
  #         closestGenes {
  #             _id
  #             name
  #             distanceTo
  #         }
  #         datasetIds
  #     }
  # }
  # ```
  getAllPeaksOfDataset(
    # #### Description
    # Id of the required document in the query
    # #### Required
    # Required
    datasetId: String

    # #### Description
    # defines the page results showed
    # #### Required
    # Optional
    limit: Int = 0

    # #### Description
    # select the current result page
    # #### Required
    # Optional
    page: Int = 0
  ): [Peaks]

  #  #### Type
  #  Data
  #  #### Service
  #  Phrases
  #  #### Name
  #  getAllPhrasesInObject
  #  #### Description
  #  gets all the phrases associated to all ids in an object
  #  #### Example
  #  ```json
  #  {
  # getAllPhrasesInObject(objectId:"RDBECOLIOPC01500"){
  # 	name
  # 	objectType
  # 	propertyPhrases {
  # 	associatedProperty {
  # 		name
  # 		value
  # 	}
  # 	}
  # }
  #  }
  #  ```
  getAllPhrasesInObject(
    # #### Description
    # id of the object to be queried
    # #### Required
    # True
    objectId: String
  ): [Phrases]

  #  #### Type
  #  Data
  #  #### Service
  #  Regulon
  #  #### Name
  #  getAllRegulon
  #  #### Description
  #  List all the regulon contained in collection
  #  #### Example
  #  ```json
  #  {
  # getAllRegulon(limit: 5){
  # 	data{
  # 	_id
  # 	regulator{
  # 		name
  # 		encodedBy{
  # 		genes{
  # 			name
  # 		}
  # 		operon{
  # 			name
  # 		}
  # 		}
  # 	}
  # 	}
  # }
  #  }
  #  ```
  getAllRegulon(
    # #### Description
    # defines the page results showed
    # #### Required
    # Optional
    limit: Int

    # #### Description
    # select the current result page
    # #### Required
    # Optional
    page: Int = 0
  ): RegulonResult!

  # #### Type
  # Data
  # #### Service
  # Sigmulon
  # #### Name
  # getAllSigmulon
  # #### Description
  # List all the Sigmulon objects contained in collection
  # #### Example
  # ```json
  # {
  #     getAllSigmulon(limit:3){
  #     data{
  #         _id
  #         sigmaFactor{
  #                 name
  #                 gene{
  #                     name
  #                 }
  #             }
  #         }
  #     }
  # }
  # ```
  getAllSigmulon(
    # #### Description
    # defines the page results showed
    # #### Required
    # Optional
    limit: Int

    # #### Description
    # select the current result page
    # #### Required
    # Optional
    page: Int = 0
  ): SigmulonResult!

  # #### Type
  # HT Data
  # #### Service
  # HT TFBinding
  # #### Name
  # getAllTFBindingOfDataset
  # #### Description
  # Gets all tfBinding docs associated to datasetID
  # #### Example
  # ```json
  # {
  #     getAllTFBindingOfDataset(datasetId:"RHTECOLIBSD00336")
  #     {
  #         _id
  #         closestGenes {
  #             _id
  #             name
  #             distanceTo
  #         }
  #         datasetIds
  #     }
  # }
  # ```
  getAllTFBindingOfDataset(
    # #### Description
    # Id of the dataset associated to TFBinding
    # #### Required
    # Required
    datasetId: String

    # #### Description
    # defines the page results showed
    # #### Required
    # Optional
    limit: Int = 0

    # #### Description
    # select the current result page
    # #### Required
    # Optional
    page: Int = 0
  ): [DatasetTFBinding]

  # #### Type
  # HT Data
  # #### Service
  # HT Transcription Start Site
  # #### Name
  # getAllTSSOfDataset
  # #### Description
  # Gets all TSS docs associated to datasetID
  # #### Example
  # ```json
  # {
  #     getAllTSSOfDataset(datasetId:"RHTECOLITSD00001")
  #     {
  #         _id
  #         chromosome
  #         leftEndPosition
  #         rightEndPosition
  #         datasetIds
  #     }
  # }
  # ```
  getAllTSSOfDataset(
    # #### Description
    # Id of the dataset associated to Transcription Start Site
    # #### Required
    # Required
    datasetId: String

    # #### Description
    # defines the page results showed
    # #### Required
    # Optional
    limit: Int = 0

    # #### Description
    # select the current result page
    # #### Required
    # Optional
    page: Int = 0
  ): [HtTSS]

  # #### Type
  # HT Data
  # #### Service
  # HT Transcription Termination Site
  # #### Name
  # getAllTTSOfDataset
  # #### Description
  # Gets all TTS docs associated to datasetID
  # #### Example
  # ```json
  # {
  #     getAllTTSOfDataset(datasetId:"RHTECOLITTD00017")
  #     {
  #         _id
  #         chromosome
  #         leftEndPosition
  #         rightEndPosition
  #         datasetIds
  #     }
  # }
  # ```
  getAllTTSOfDataset(
    # #### Description
    # Id of the dataset associated to Transcription Termination Site
    # #### Required
    # Required
    datasetId: String

    # #### Description
    # defines the page results showed
    # #### Required
    # Optional
    limit: Int = 0

    # #### Description
    # select the current result page
    # #### Required
    # Optional
    page: Int = 0
  ): [HTtranscriptionTerminationSite]

  # #### Type
  # HT Data
  # #### Service
  # HT Transcription Unit
  # #### Name
  # getAllTransUnitsOfDataset
  # #### Description
  # Gets all Transcription Units docs associated to datasetID
  # #### Example
  # ```json
  # {
  #     getAllTransUnitsOfDataset(datasetId:"RHTECOLITUD00237")
  #     {
  #         _id
  #         genes {
  #             _id
  #             name
  #             bnumber
  #         }
  #         datasetIds
  #     }
  # }
  # ```
  getAllTransUnitsOfDataset(
    # #### Description
    # Id of the dataset associated to Transcription Unit
    # #### Required
    # Required
    datasetId: String

    # #### Description
    # defines the page results showed
    # #### Required
    # Optional
    limit: Int = 0

    # #### Description
    # select the current result page
    # #### Required
    # Optional
    page: Int = 0
  ): [HtTranscriptionUnit]

  # #### Type
  # Data
  # #### Service
  # Recent Queries
  # #### Name
  # getAllUsedQueries
  # #### Description
  # List all the previously used queries
  # #### Example
  # ```json
  # {
  #     getAllUsedQueries
  #     {
  #         _id
  #         querySearchString
  #         dateOfUse
  #         usedTimes
  #     }
  # }
  # ```
  getAllUsedQueries(
    # #### Description
    # defines the page results showed
    # #### Required
    # Optional
    limit: Int = 10

    # #### Description
    # select the current result page
    # #### Required
    # Optional
    page: Int = 0
  ): [recentQuery]

  # #### Type
  # HT Data
  # #### Service
  # HT authorsData
  # #### Name
  # getAuthorsDataById
  # #### Description
  # Gets an authorsData doc by and ID
  # #### Example
  # ```json
  # {
  #     getAuthorsDataById(_id:"ECOLIAD000000001")
  #     {
  #         _id
  #         authorsData
  #         datasetIds
  #     }
  # }
  # ```
  getAuthorsDataById(
    # #### Description
    # id of the AuthorsData
    # #### Required
    # Required
    _id: String
  ): authorsData

  # #### Type
  # HT Data
  # #### Service
  # HT authorsData
  # #### Name
  # getAuthorsDataOfDataset
  # #### Description
  # Gets an authorsData docs linked to dataset
  # #### Example
  # ```json
  # {
  #     getAuthorsDataOfDataset(datasetId:"RHTECOLIBSD00189")
  #     {
  #         _id
  #         authorsData
  #         datasetIds
  #     }
  # }
  # ```
  getAuthorsDataOfDataset(
    # #### Description
    # id of the dataset linket to authorsData
    # #### Required
    # Required
    datasetId: String
  ): [authorsData]

  # #### Type
  # Data
  # #### Service
  # DownloadableFile
  # #### Name
  # getDataOfFile
  # #### Description
  # Gets the data of the specified file name
  # #### Example
  # ```json
  # {
  #     getDataOfFile(fileName:"TFSet")
  #     {
  #         _id
  #         fileName
  #         content
  #         columnsDetails
  #     }
  # }
  # ```
  getDataOfFile(
    # #### Description
    # Indicates the name of the file which data is required
    # #### Required
    # You must give this parameter
    fileName: String
  ): DownloadableFile!

  # #### Type
  # Data
  # #### Service
  # DB Info
  # #### Name
  # getDatabaseInfo
  # #### Description
  # get info of all db releases
  # #### Example
  # ```json
  # {
  # getDatabaseInfo{
  #     regulonDBVersion
  #     ecocycVersion
  #     lcVersion
  #     releaseDate
  #     note
  # }
  # }
  # ```
  getDatabaseInfo: [dbInfo]

  # #### Type
  # HT Data
  # #### Service
  # HT Dataset
  # #### Name
  # getDatasetByID
  # #### Description
  # Gets a specific dataset document by an datasetID
  # #### Example
  # ```json
  # {
  #     getDatasetByID(datasetID:"RHTECOLIBSD00365")
  #     {
  #         _id
  #         objectsTested {
  #             _id
  #             name
  #             note
  #         }
  #     }
  # }
  # ```
  getDatasetByID(
    # #### Description
    # Id of the required document in the query
    # #### Required
    # Required
    datasetID: String
  ): Dataset

  # #### Type
  # HT Data
  # #### Service
  # HT Dataset
  # #### Name
  # getDatasetsFromSearch
  # #### Description
  # List the dataset docs obtained by an advancedSearch String
  # #### Example
  # ```json
  # {
  #     getDatasetsFromSearch(advancedSearch:"AaeR[objectsTested.abbreviatedName]")
  #     {
  #         _id
  #         objectsTested {
  #             _id
  #             name
  #             note
  #         }
  #     }
  # }
  # ```
  getDatasetsFromSearch(
    # #### Description
    # usable for queries that require advanced control, uses a \"value[field]\" syntax;
    # supports logic operators (AND,OR,NOT). **eg**: \"(arac|arad[geneInfo.name] AND reverse[gene.strand])\"
    # #### Required
    # Required
    advancedSearch: String
  ): [Dataset]

  # #### Type
  # HT Data
  # #### Service
  # HT Dataset
  # #### Name
  # getDatasetsWithMetadata
  # #### Description
  # Gets a specific dataset document by an datasetID
  # #### Example
  # ```json
  # {
  #     getDatasetsWithMetadata
  #     {
  #         datasets{
  #             _id
  #             objectsTested {
  #                 _id
  #                 name
  #                 note
  #             }
  #         }
  #         metadata
  #     }
  # }
  # ```
  getDatasetsWithMetadata(
    # #### Description
    # Indicates to query the datasetType to retrieve
    # #### Required
    # Required
    datasetType: String
  ): htDatasets

  # #### Type
  # Data
  # #### Service
  # Gensor Unit
  # #### Name
  # getGUsBy
  # #### Description
  # List the Gensor Units obtained by a search or advancedSearch String
  # #### Example
  # ```json
  # {
  #   getGUsBy(advancedSearch:"'Amino acid transport and metabolism'[gensorUnit.groups]")
  #   {
  #     data{
  #       gensorUnit{
  #         _id
  #         name
  #         signalName
  #       }
  #     }
  #   }
  # }
  # ```
  getGUsBy(
    # #### Description
    # usable for queries that require advanced control, uses a \"value[field]\" syntax;
    # supports logic operators (AND,OR,NOT). **eg**: \"(arac|arad[geneInfo.name] AND reverse[gene.strand])\"
    # #### Required
    # You must use search or advancedSearch
    advancedSearch: String

    # #### Description
    # define if \"search\" will be Case Sensitive and cannot be a substring
    # #### Required
    # Optional
    fullMatchOnly: Boolean = false

    # #### Description
    # defines the page results showed
    # #### Required
    # Optional
    limit: Int

    # #### Description
    # usable for specific organismName queries (not available right now)
    # #### Required
    # Optional
    organismName: String

    # #### Description
    # select the current result page
    # #### Required
    # Optional
    page: Int = 0

    # #### Description
    # select the fields to be queried by \"search\"
    # #### Required
    # Optional
    properties: [String] = ["gensorUnit._id", "gensorUnit.name"]

    # #### Description
    # usable for text search on fields defined in \"Properties\" parameter; syntax;
    # supports logic operators (AND,OR,NOT). **eg**: \"arad AND arac OR \"biosynthesis of macromolecules\"\"
    # #### Required
    # You must use search or advancedSearch
    search: String
  ): GUResult!

  # #### Type
  # HT Data
  # #### Service
  # HT Gene Expression
  # #### Name
  # getGeneExpressionById
  # #### Description
  # Get GeneExpression doc by an id
  # #### Example
  # ```json
  # {
  #     getGeneExpressionById(_id:"SRR057747,b0001")
  #     {
  #         _id
  #         gene {
  #             _id
  #             name
  #             bnumber
  #         }
  #         tpm
  #         datasetIds
  #     }
  # }
  # ```
  getGeneExpressionById(
    # #### Description
    # Id of the required document in the query
    # #### Required
    # Required
    _id: String
  ): GeneExpression

  # #### Type
  # HT Data
  # #### Service
  # HT Gene Expression
  # #### Name
  # getGeneExpressionFromSearch
  # #### Description
  # Get GeneExpression docs by an advancedSearch string (recommended for ranged queries in numerical fields)
  # #### Example
  # ```json
  # {
  #     getGeneExpressionFromSearch(advancedSearch:"1000::2000[tpm] and 3500::4000[fpkm]" page: 0 limit: 10)
  #     {
  #         _id
  #         gene {
  #             _id
  #             name
  #             bnumber
  #         }
  #         tpm
  #         datasetIds
  #     }
  # }
  # ```
  getGeneExpressionFromSearch(
    # #### Description
    # usable for queries that require advanced control, uses a \"value[field]\" syntax;
    # supports logic operators (AND,OR,NOT). **eg**: \"(arac|arad[geneInfo.name] AND reverse[gene.strand])\"
    # #### Required
    # Required
    advancedSearch: String

    # #### Description
    # defines the page results showed
    # #### Required
    # Optional
    limit: Int = 10

    # #### Description
    # select the current result page
    # #### Required
    # Optional
    page: Int = 0
  ): [GeneExpression]

  # #### Type
  # Data
  # #### Service
  # Gene
  # #### Name
  # getGenesBy
  # #### Description
  # List the genes obtained by a search or advancedSearch String
  # #### Example
  # ```json
  # {
  #   getGenesBy(advancedSearch:"((forward[geneInfo.strand]) and ppk[geneInfo.name]) or 'Lon protease'[products.name]")
  #   {
  #     data{
  #       gene{
  #         name
  #         _id
  #         strand
  #       }
  #       products{
  #         name
  #       }
  #     }
  #   }
  # }
  # ```
  getGenesBy(
    # #### Description
    # usable for queries that require advanced control, uses a \"value[field]\" syntax;
    # supports logic operators (AND,OR,NOT). **eg**: \"(arac|arad[geneInfo.name] AND reverse[gene.strand])\"
    # #### Required
    # You must use search or advancedSearch
    advancedSearch: String

    # #### Description
    # define if \"search\" will be Case Sensitive and cannot be a substring
    # #### Required
    # Optional
    fullMatchOnly: Boolean = false

    # #### Description
    # defines the page results showed
    # #### Required
    # Optional
    limit: Int

    # #### Description
    # usable for specific organismName queries (not available right now)
    # #### Required
    # Optional
    organismName: String

    # #### Description
    # select the current result page
    # #### Required
    # Optional
    page: Int = 0

    # #### Description
    # select the fields to be queried by \"search\"
    # #### Required
    # Optional
    properties: [String] = [
      "gene._id"
      "gene.name"
      "gene.synonyms"
      "gene.type"
      "gene.bnumber"
      "products.name"
      "products.abbreviatedName"
    ]

    # #### Description
    # usable for text search on fields defined in \"Properties\" parameter; syntax;
    # supports logic operators (AND,OR,NOT). **eg**: \"arad AND arac OR \"biosynthesis of macromolecules\"\"
    # #### Required
    # You must use search or advancedSearch
    search: String
  ): GenesResult!

  # #### Type
  # Tools
  # #### Service
  # DTT
  # #### Name
  # getGeneticElementsFromInterval
  # #### Description
  # Obtained all the elements that are in the selected range
  # #### Example
  # ```json
  #   {
  #       getGeneticElementsFromInterval(leftEndPosition:100, rightEndPosition: 1000){
  #           _id
  #           leftEndPosition
  #           rightEndPosition
  #       }
  #   }
  # ```
  getGeneticElementsFromInterval(
    # #### Description
    # Define if the elements to draw are completely in the selected range (true) or could be outside the range (false by default)
    # #### Required
    # Optional
    covered: Boolean = false

    # #### Description
    # Defines the beginning of the element range to draw
    # #### Required
    # Required
    leftEndPosition: Int

    # #### Description
    # Defines the elements to display from this list: gene, promoter, operon, tf_binding_site, translational_tf_binding_site,
    # srna, riboswitch, terminator, translational_attenuator, transcriptional_attenuator, ppGpp
    # #### Required
    # Optional
    objectType: [String]

    # #### Description
    # Defines the ending of the element range to draw
    # #### Required
    # Required
    rightEndPosition: Int

    # #### Description
    # Defines the direction of the element strand, could be forward, reverse or both
    # #### Required
    # Optional
    strand: String
  ): [DTTData]

  # #### Type
  # Tools
  # #### Service
  # GOTree
  # #### Name
  # getGoTerms
  # #### Description
  # Obtain the principal classes of the Gene Ontology (Cellular Component, Biological Process, Molecular Function)
  # #### Example
  # ```json
  #     {
  #         getGoTerms {
  #             _id
  #             name
  #             ontologyId
  #         }
  #     }
  # ```
  getGoTerms: [GOTree]

  # #### Type
  # HT Data
  # #### Service
  # HT NLP Growth Conditions
  # #### Name
  # getNLPGrowthConditionById
  # #### Description
  # Gets a specific NLP Growth Conditions document by an datasetID
  # #### Example
  # ```json
  # {
  #     getNLPGrowthConditionById(datasetId:"GENE_EXPRESSION_SRR057747")
  #     {
  #         _id
  #         datasetIds
  #         medium {
  #             value
  #             score
  #             associatedPhrase
  #         }
  #         mediumSupplements{
  #             value
  #             score
  #             associatedPhrase
  #         }
  #     }
  # }
  # ```
  getNLPGrowthConditionById(
    # #### Description
    # Id of the required document in the query
    # #### Required
    # Required
    datasetId: String
  ): NLPGrowthConditions

  # #### Type
  # HT Data
  # #### Service
  # HT NLP Growth Conditions
  # #### Name
  # getNLPGrowthConditionBySearch
  # #### Description
  # Gets a specific NLP Growth Conditions document by an advancedSearch
  # #### Example
  # ```json
  # {
  #     getNLPGrowthConditionBySearch(advancedSearch:"'0.3 % glucose'[mediumSupplements.value]")
  #     {
  #         _id
  #         datasetIds
  #         mediumSupplements{
  #             value
  #             score
  #             associatedPhrase
  #         }
  #     }
  # }
  # ```
  getNLPGrowthConditionBySearch(
    # #### Description
    # Id of the required document in the query
    # #### Required
    # Required
    advancedSearch: String
  ): [NLPGrowthConditions]

  # #### Type
  # Tools
  # #### Service
  # RegulatoryNetwork
  # #### Name
  # getNodesFrom
  # #### Description
  # List all the nodes contained related to defined objects
  # #### Example
  # ```json
  # {
  #     getNodesOf(objectName:["MalI"]){
  #         _id
  #         name
  #         type
  #         indegree{
  #             _id
  #             name
  #             type
  #             networkType
  #             regulatoryEffect
  #         }
  #     }
  # }
  # ```
  getNodesOf(
    # #### Description
    # defines the network type to be showed on results of indegree or outdegree
    # #### Required
    # Optional
    networkType: [String]

    # #### Description
    # Specifies the object id to be query
    # #### Required
    # Required
    objectId: [String]

    # #### Description
    # Specifies the object name to be query
    # #### Required
    # Required
    objectName: [String]
  ): [RegulatoryNetwork]
  getObjectList(datamartType: String!): [regulonList]

  # #### Type
  # Data
  # #### Service
  # Operon
  # #### Name
  # getOperonBy
  # #### Description
  # List the Operon objects obtained by a search or advancedSearch String
  # #### Example
  # ```json
  # {
  #   getOperonBy(search: "accD or accBC"){
  #     data{
  #       operon{
  #         _id
  #         name
  #         strand
  #       }
  #       transcriptionUnits{
  #         _id
  #         name
  #       }
  #     }
  #   }
  # }
  # ```
  getOperonBy(
    # #### Description
    # usable for queries that require advanced control, uses a \"value[field]\" syntax;
    # supports logic operators (AND,OR,NOT). **eg**: \"(arac|arad[operon.name] AND arab[transcriptionUnit.name])\"
    # #### Required
    # Optional
    advancedSearch: String

    # #### Description
    # define if \"search\" will be Case Sensitive and cannot be a substring
    # #### Required
    # Optional
    fullMatchOnly: Boolean = false

    # #### Description
    # defines the page results showed
    # #### Required
    # Optional
    limit: Int

    # #### Description
    # select the current result page
    # #### Required
    # Optional
    page: Int = 0

    # #### Description
    # select the fields to be queried by \"search\"
    # #### Required
    # Optional
    properties: [String] = [
      "operon._id"
      "operon.name"
      "transcriptionUnits.name"
      "transcriptionUnits.promoter.name"
    ]

    # #### Description
    # usable for text search on fields defined in \"Properties\" parameter; syntax;
    # supports logic operators (AND,OR,NOT). **eg**: \"arad AND arac OR \"biosynthesis of macromolecules\"\"
    # #### Required
    # Optional
    search: String
  ): OperonResult!

  # #### Type
  # Data
  # #### Service
  # Overviews
  # #### Name
  # getOverview
  # #### Description
  # Shows the element that has been called and shows all the information it contains
  # #### Example
  # ```json
  #  {
  #     getOverview(_id:"RDBECOLIOV00002"){
  #       _id
  #       queryName
  #       objectType
  #       graph{
  #         title
  #         description
  #         labelX
  #         labelY
  #         footGraph
  #         graphType
  #       }
  #       data{
  #         xAxis
  #         yAxis
  #         objectsRelated{
  #           _id
  #           name
  #         }
  #       }
  #
  #     }
  #   }
  #   ```
  getOverview(
    # #### Description
    # _id of the required overview
    # #### Required
    # Required
    _id: String
  ): overviewInfoType

  # #### Type
  # HT Data
  # #### Service
  # HT Peaks
  # #### Name
  # getPeakById
  # #### Description
  # Gets a peak doc by an ID
  # #### Example
  # ```json
  # {
  #     getPeakById(_id:"ECOLIPK000000001")
  #     {
  #         _id
  #         closestGenes {
  #             _id
  #             name
  #             distanceTo
  #         }
  #         datasetIds
  #     }
  # }
  # ```
  getPeakById(
    # #### Description
    # Id of the required document in the query
    # #### Required
    # Required
    _id: String
  ): Peaks

  #  #### Type
  #  Data
  #  #### Service
  #  Phrases
  #  #### Name
  #  getPhraseOf
  #  #### Description
  #  gets all the phrases of a gene based on an identifier
  #  #### Example
  #  ```json
  #  {
  # getPhraseOf(objectId:"RDBECOLIRCC00185"){
  # 	name
  # 	objectType
  # 	propertyPhrases {
  # 	associatedProperty {
  # 		name
  # 		value
  # 	}
  # 	}
  # }
  #  }
  #  ```
  getPhraseOf(
    # #### Description
    # array of object ids to be queried
    # #### Required
    # True
    objectId: [String]
  ): [Phrases]

  # #### Type
  # Data
  # #### Service
  # All Data
  # #### Name
  # getProperties
  # #### Description
  # List all the properties defined in a collection
  # #### Example
  # ```json
  # {
  # 	getProperties(collection:"gene")
  # }
  # ```
  getProperties(
    # #### Description
    # defines the collection to get the properties
    # #### Required
    # Always
    collection: String!
  ): [String]

  # #### Type
  # Tools
  # #### Service
  # Coexpression
  # #### Name
  # getRankFromGeneList
  # #### Description
  # Get the coexpression list from a gene compared to the top of other gene. It works with names or ids.
  # #### Example
  # ```json
  # {
  #     getRankFromGeneList(gene:"araC" geneList:["yihX", "cdaR", "topAI"]){
  #         gene {
  #             _id
  #             name
  #         }
  #         rank
  #     }
  # }
  # ```
  getRankFromGeneList(
    # #### Description
    # Name of the gene to compare with the principal gene
    # #### Required
    # Optional
    gene: String

    # #### Description
    # Id of the gene to compare with the principal gene
    # #### Required
    # Optional
    geneId: String

    # #### Description
    # Id list of the top 50 principal gene
    # #### Required
    # Only if geneId is used
    geneIdList: [String]

    # #### Description
    # Name list of the top 50 principal gene
    # #### Required
    # Only if gene is used
    geneList: [String]
  ): [CoexpressionData]

  #  #### Type
  #  Data
  #  #### Service
  #  Regulon
  #  #### Name
  #  getRegulonBy
  #  #### Description
  #  List the regulon docs obtained by a search or advancedSearch String
  #  #### Example
  #  ```json
  #  {
  # getRegulonBy(search: "agaR or araC"){
  # 	data{
  # 	_id
  # 	regulator{
  # 		name
  # 		encodedBy{
  # 		genes{
  # 			name
  # 		}
  # 		operon{
  # 			name
  # 		}
  # 		}
  # 	}
  # 	}
  # }
  #  }
  #  ```
  getRegulonBy(
    # #### Description
    # usable for queries that require advanced control, uses a \"value[field]\" syntax;
    # supports logic operators (AND,OR,NOT). **eg**: \"arac|arad[transcriptionFactor.name]\"
    # #### Required
    # You must use search or advancedSearch
    advancedSearch: String

    # #### Description
    # define if \"search\" will be Case Sensitive and cannot be a substring
    # #### Required
    # Optional
    fullMatchOnly: Boolean = false

    # #### Description
    # defines the page results showed
    # #### Required
    # Optional
    limit: Int

    # #### Description
    # usable for specific organismName queries (not available right now)
    # #### Required
    # Optional
    organismName: String

    # #### Description
    # select the current result page
    # #### Required
    # Optional
    page: Int = 0

    # #### Description
    # select the fields to be queried by \"search\"
    # #### Required
    # Optional
    properties: [String] = [
      "_id"
      "regulator.name"
      "regulator.abbreviatedName"
      "regulator.conformations.name"
    ]

    # #### Description
    # usable for text search on fields defined in \"Properties\" parameter; syntax;
    # supports logic operators (AND,OR,NOT). **eg**: \"arad AND arac OR \"biosynthesis of macromolecules\"\"
    # #### Required
    # You must use search or advancedSearch
    search: String
  ): RegulonResult!

  # #### Type
  # Data
  # #### Service
  # Sigmulon
  # #### Name
  # getSigmulonBy
  # #### Description
  # List the Sigmulon objects obtained by a search or advancedSearch String
  # #### Example
  # ```json
  # {
  #     getSigmulonBy(search:"fliA or \"Sigma 70\""){
  #     data{
  #         _id
  #         sigmaFactor{
  #                 name
  #                 gene{
  #                     name
  #                 }
  #             }
  #         }
  #     }
  # }
  # ```
  getSigmulonBy(
    # #### Description
    # usable for queries that require advanced control, uses a \"value[field]\" syntax;
    # supports logic operators (AND,OR,NOT). **eg**: \"(arac|arad[operon.name] AND arab[transcriptionUnit.name])\"
    # #### Required
    # You must use search or advancedSearch
    advancedSearch: String

    # #### Description
    # define if \"search\" will be Case Sensitive and cannot be a substring
    # #### Required
    # Optional
    fullMatchOnly: Boolean = false

    # #### Description
    # defines the page results showed
    # #### Required
    # Optional
    limit: Int

    # #### Description
    # select the current result page
    # #### Required
    # Optional
    page: Int = 0

    # #### Description
    # select the fields to be queried by \"search\"
    # #### Required
    # Optional
    properties: [String] = [
      "sigmaFactor._id"
      "sigmaFactor.name"
      "sigmaFactor.abbreviatedName"
      "sigmaFactor.synonyms"
      "sigmaFactor.gene.name"
    ]

    # #### Description
    # usable for text search on fields defined in \"Properties\" parameter; syntax;
    # supports logic operators (AND,OR,NOT). **eg**: \"arad AND arac OR \"biosynthesis of macromolecules\"\"
    # #### Required
    # You must use search or advancedSearch
    search: String
  ): SigmulonResult!

  # #### Type
  # Tools
  # #### Service
  # GOTree
  # #### Name
  # getSubclassesOfTermId
  # #### Description
  # Obtain the subclasses of the selected term id
  # #### Example
  # ```json
  #     {
  #         getSubclassesOfTermId(_id: "RDBONTOLGON01836") {
  #             _id
  #             name
  #             ontologyId
  #             genes {
  #                 name
  #                 productName
  #             }
  #         }
  #     }
  # ```
  getSubclassesOfTermId(
    # #### Description
    # Id of the term to obtain its subclasses
    # #### Required
    # Required
    _id: String
  ): [GOTree]

  # #### Type
  # Tools
  # #### Service
  # GOTree
  # #### Name
  # getSuperclassesOfTermId
  # #### Description
  # Obtain the superclasses of the selected term id
  # #### Example
  # ```json
  #     {
  #         getSuperclassesOfTermId(_id: "RDBONTOLGON01836") {
  #             _id
  #             name
  #             ontologyId
  #             genes {
  #                 name
  #                 productName
  #             }
  #         }
  #     }
  # ```
  getSuperclassesOfTermId(
    # #### Description
    # Id of the term to obtain its subclasses
    # #### Required
    # Required
    _id: String
  ): [GOTree]

  # #### Type
  # HT Data
  # #### Service
  # HT TFBinding
  # #### Name
  # getTFBindingById
  # #### Description
  # Gets a TFBinding doc by an ID
  # #### Example
  # ```json
  # {
  #     getTFBindingById(_id:"ECOLIBS000000001")
  #     {
  #         _id
  #         closestGenes {
  #             _id
  #             name
  #             distanceTo
  #         }
  #         datasetIds
  #     }
  # }
  # ```
  getTFBindingById(
    # #### Description
    # Id of the required document in the query
    # #### Required
    # Required
    _id: String
  ): DatasetTFBinding

  # #### Type
  # HT Data
  # #### Service
  # HT Transcription Start Site
  # #### Name
  # getTSSByID
  # #### Description
  # Get TranscriptionStartSite by an id
  # #### Example
  # ```json
  # {
  #     getTSSByID(_id:"ECOLITS000000001")
  #     {
  #         _id
  #         chromosome
  #         leftEndPosition
  #         rightEndPosition
  #         datasetIds
  #     }
  # }
  # ```
  getTSSByID(
    # #### Description
    # Id of the required document in the query
    # #### Required
    # Required
    _id: String
  ): HtTSS

  # #### Type
  # HT Data
  # #### Service
  # HT Transcription Termination Site
  # #### Name
  # getTTSByID
  # #### Description
  # Get TranscriptionTerminationSite by an id
  # #### Example
  # ```json
  # {
  #     getTTSByID(_id:"ECOLITT000000001")
  #     {
  #         _id
  #         chromosome
  #         leftEndPosition
  #         rightEndPosition
  #         datasetIds
  #     }
  # }
  # ```
  getTTSByID(
    # #### Description
    # Id of the required document in the query
    # #### Required
    # Required
    _id: String
  ): HTtranscriptionTerminationSite

  # #### Type
  # HT Data
  # #### Service
  # HT Transcription Unit
  # #### Name
  # getTUByID
  # #### Description
  # Get TranscriptionUnit by an id
  # #### Example
  # ```json
  # {
  #     getTUByID(_id:"ECOLITU000000001")
  #     {
  #         _id
  #         genes {
  #             _id
  #             name
  #             bnumber
  #         }
  #         datasetIds
  #     }
  # }
  # ```
  getTUByID(
    # #### Description
    # Id of the required document in the query
    # #### Required
    # Required
    _id: String
  ): HtTranscriptionUnit

  # #### Type
  # Tools
  # #### Service
  # GOTree
  # #### Name
  # getTermBy
  # #### Description
  # Obtain an specific term
  # #### Example
  # ```json
  #     {
  #         getTermBy(search: "RDBONTOLGON01836") {
  #             _id
  #             name
  #             ontologyId
  #             genes {
  #                 name
  #                 productName
  #             }
  #         }
  #     }
  # ```
  getTermBy(
    # #### Description
    # usable for queries that require advanced control, uses a \"value[field]\" syntax;
    # supports logic operators (AND,OR,NOT). **eg**: \"(arac|arad[geneInfo.name] AND reverse[gene.strand])\"
    # #### Required
    # You must use search or advancedSearch
    advancedSearch: String

    # #### Description
    # define if \"search\" will be Case Sensitive and cannot be a substring
    # #### Required
    # Optional
    fullMatchOnly: Boolean = false

    # #### Description
    # select the fields to be queried by \"search\"
    # #### Required
    # Optional
    properties: [String] = ["_id", "name", "ontologyId"]

    # #### Description
    # usable for text search on fields defined in \"Properties\" parameter; syntax;
    # supports logic operators (AND,OR,NOT). **eg**: \"arad AND arac OR \"biosynthesis of macromolecules\"\"
    # #### Required
    # You must use search or advancedSearch
    search: String
  ): [GOTree]

  # #### Type
  # Tools
  # #### Service
  # Coexpression
  # #### Name
  # getTopCoexpressionRanking
  # #### Description
  # Gets the top Coexpression (50 max and default) by a gene ID or name.
  # #### Example
  # ```json
  # {
  #     getTopCoexpressionRanking(gene: "arac")
  #     {
  #         gene {
  #             _id
  #             name
  #         }
  #         rank
  #     }
  # }
  # ```
  getTopCoexpressionRanking(
    # #### Description
    # Defines the name of the gene to search
    # #### Required
    # You must choose id or gene
    gene: String

    # #### Description
    # Defines the id of the gene to search
    # #### Required
    # You must choose id or gene
    id: String

    # #### Description
    # Defines the limit of the elements to show (max 50)
    # #### Required
    # Optional
    limit: Int = 50
  ): [CoexpressionData]

  # #### Type
  # Data
  # #### Service
  # DownloadableFile
  # #### Name
  # listAllDownloadableFiles
  # #### Description
  # List all files with its data
  # #### Example
  # ```json
  # {
  #     listAllDownloadableFiles
  #     {
  #         _id
  #         fileName
  #         description
  #         content
  #         columnsDetails
  #     }
  # }
  # ```
  listAllDownloadableFiles: [DownloadableFile]!

  # #### Type
  # Data
  # #### Service
  # DownloadableFile
  # #### Name
  # listAllFileNames
  # #### Description
  # List all the names of the available files
  # #### Example
  # ```json
  # {
  #     listAllFileNames
  # }
  # ```
  listAllFileNames: [String]!
}

# _
type RIObjectType {
  # _
  _id: String

  # _
  citations: [TFBCitations]

  # _
  origin: String

  # _
  relativeGeneDistance: Int

  # _
  relativeTSSDistance: Int

  # _
  sequence: String

  # _
  strand: String

  # _
  tfbsLeftPosition: Int

  # _
  tfbsRightPosition: Int
}

# _
type Reactions {
  # _
  components: [Components]

  # _
  description: String

  # _
  name: String

  # _
  number: Int

  # _
  order: Int

  # _
  pathwayComponents: String

  # _
  type: String
}

# _
type RegulatedEntity {
  # _
  _id: String

  # _
  name: String

  # _
  type: String
}

# _
type RegulatedGenes {
  # _
  _id: String

  # _
  function: String

  # _
  name: String

  # _
  terms: Terms
}

# _
type RegulatedOperons {
  # _
  _id: String

  # _
  firstGene: simpleType

  # _
  function: String

  # _
  name: String
}

# _
type RegulatedSigmaFactors {
  # _
  _id: String

  # _
  function: String

  # _
  gene: simpleType

  # _
  name: String
}

# _
type RegulatedTranscriptionFactors {
  # _
  _id: String

  # _
  function: String

  # _
  genes: [RegulatedGenes]

  # _
  name: String
}

# _
type RegulatedTranscriptionUnits {
  # _
  _id: String

  # _
  firstGene: simpleType

  # _
  function: String

  # _
  name: String

  # _
  promoter: simpleType
}

# _
type Regulates {
  # _
  genes: [RegulatedGenes]

  # _
  operons: [RegulatedOperons]

  # _
  sigmaFactors: [RegulatedSigmaFactors]

  # _
  transcriptionFactors: [RegulatedTranscriptionFactors]

  # _
  transcriptionUnits: [RegulatedTranscriptionUnits]
}

# _
type Regulation {
  # _
  operon: regulationOperon

  # _
  regulators: [Regulators]

  # _
  statistics: Statistics
}

# _
type RegulationPositions {
  # _
  leftEndPosition: Int

  # _
  rightEndPosition: Int
}

# _
type Regulator {
  # _
  _id: String

  # _
  abbreviatedName: String

  # _
  additiveEvidences: [AdditiveEvidences]

  # _
  citations: [Citations]

  # _
  confidenceLevel: String

  # _
  conformations: [Conformations]

  # _
  connectivityClass: String

  # _
  encodedBy: EncodedBy

  # _
  family: String

  # _
  function: String

  # _
  name: String

  # _
  note: String

  # _
  products: [TFProducts]

  # _
  sensingClass: String

  # _
  siteLength: String

  # _
  symmetry: String

  # _
  synonyms: [String]

  # _
  type: String
}

# _
type RegulatorBindingSites {
  # _
  function: String

  # _
  mechanism: [String]

  # _
  regulator: Regulator

  # _
  regulatoryInteractions: [RegulatoryInteractions]
}

# _
type Regulators {
  # _
  _id: String

  # _
  function: String

  # _
  name: String

  # _
  type: String
}

# _
type RegulatoryBindingSites {
  # _
  _id: String

  # _
  absolutePosition: Float

  # _
  citations: [Citations]

  # _
  function: String

  # _
  leftEndPosition: Int

  # _
  rightEndPosition: Int

  # _
  sequence: String

  # _
  strand: String
}

# _
type RegulatoryInteractions {
  # _
  _id: String

  # _
  additiveEvidences: [AdditiveEvidences]

  # _
  citations: [Citations]

  # _
  function: String

  # _
  mechanism: [String]

  # _
  note: String

  # _
  regulatorySite: RegulatorySite

  # _
  relativeCenterPosition: Float
}

# RegulatoryNetwork type is principal type on the service
type RegulatoryNetwork {
  # _
  _id: String

  # _
  indegree: [Node]

  # _
  name: String

  # _
  outdegree: [Node]

  # _
  type: String
}

# _
type RegulatorySite {
  # _
  _id: String

  # _
  centerEndPosition: Float

  # _
  citations: [Citations]

  # _
  leftEndPosition: Int

  # _
  length: Int

  # _
  note: String

  # _
  rightEndPosition: Int

  # _
  sequence: String
}

# _
type RegulonContinuants {
  # _
  _id: String

  # _
  name: String

  # _
  type: String
}

# _
type RegulonDatamart {
  # _
  _id: String

  # _
  aligmentMatrix: AligmentMatrix

  # _
  allCitations: [Citations]

  # _
  evolutionaryConservation: EvolutionaryConservation

  # _
  organism: Organism

  # _
  regulates: Regulates

  # _
  regulator: Regulator

  # _
  regulatoryInteractions: [RegulonRegulatoryInteractions]

  # _
  summary: Summary

  # _
  terms: Terms
}

# _
type RegulonGeneOntology {
  # _
  biologicalProcess: [RegulonGeneOntologyItem]

  # _
  cellularComponent: [RegulonGeneOntologyItem]

  # _
  molecularFunction: [RegulonGeneOntologyItem]
}

# _
type RegulonGeneOntologyItem {
  # _
  _id: String

  # _
  genes: [GeneTermsObject]

  # _
  name: String
}

# _
type RegulonMultifun {
  # _
  _id: String

  # _
  genes: [GeneTermsObject]

  # _
  name: String
}

# _
type RegulonRegulatoryInteractions {
  # _
  _id: String

  # _
  activeConformation: ActiveConformation

  # _
  additiveEvidences: [AdditiveEvidences]

  # _
  citations: [Citations]

  # _
  confidenceLevel: String

  # _
  distanceToFirstGene: Float

  # _
  distanceToPromoter: Float

  # _
  function: String

  # _
  regulatedEntity: RegulatedEntity

  # _
  regulatedGenes: [simpleType]

  # _
  regulatoryBindingSites: RegulatoryBindingSites
}

# _
type RegulonResult {
  # contains server response
  data: [RegulonDatamart]

  # contains pagination info
  pagination: Pagination
}

# _
type ReleaseDataControl {
  # _
  date: String

  # _
  version: String
}

# _
type Serie {
  # _
  sourceId: String

  # _
  sourceName: String
}

# _
type ShineDalgarnos {
  # _
  _id: String

  # _
  distanceToGene: Int

  # _
  leftEndPosition: Int

  # _
  note: String

  # _
  rightEndPosition: Int

  # _
  sequence: String
}

# _
type SigmaFactor {
  # _
  _id: String

  # _
  abbreviatedName: String

  # _
  gene: SimpleTypeSigma

  # _
  name: String

  # _
  sigmulonGenes: [SigmulonGenes]

  # _
  sigmulonRegulators: [SimpleTypeSigma]

  # _
  synonyms: [String]
}

# _
type SigmulonDatamart {
  # _
  _id: String

  # _
  allCitations: [Citations]

  # _
  organism: Organism

  # _
  sigmaFactor: SigmaFactor

  # _
  statistics: SigmulonStatistics

  # _
  transcribedPromoters: [TranscribedPromoters]
}

# _
type SigmulonGenes {
  # _
  _id: String

  # _
  geneOntologyTerms: GeneOntologyTerms

  # _
  name: String
}

# _
type SigmulonResult {
  # contains server response
  data: [SigmulonDatamart]

  # contains pagination info
  pagination: Pagination
}

type SigmulonStatistics {
  # _
  cotranscriptionFactors: Int

  # _
  genes: Int

  # _
  promoters: Int

  # _
  sigmaFactors: Int

  # _
  transcriptionFactors: Int

  # _
  transcriptionUnits: Int
}

# _
type SimpleTypeSigma {
  # _
  _id: String

  # _
  name: String
}

# _
type SourceSerie {
  # _
  method: String

  # _
  platform: Platform

  # _
  readType: String

  # _
  series: [Serie]

  # _
  sourceDB: String

  # _
  strategy: String

  # _
  title: String
}

# _
type SrnaSummary {
  # _
  bindingSites: SummaryObject

  # _
  genes: SummaryObject

  # _
  regulatoryInteractions: SummaryObject

  # _
  sigmaFactors: SummaryObject

  # _
  transcriptionFactors: SummaryObject

  # _
  transcriptionUnits: SummaryObject
}

# _
type Statistics {
  # _
  promoters: Int

  # _
  regulators: Int

  # _
  regulatoryInteractions: Int
}

# _
type StatisticsDBType {
  # _
  attenuators: detailedStatistics

  # _
  effectors: detailedStatistics

  # _
  externalReferences: dbInfoExternalReferencesType

  # _
  functConfTF: detailedStatistics

  # _
  functionalClasses: detailedStatistics

  # _
  genes: detailedStatistics

  # _
  gensorUnits: detailedStatistics

  # _
  operon: detailedStatistics

  # _
  product: productsDBInfoType

  # _
  promoters: detailedStatistics

  # _
  regulatorBindingSites: detailedStatistics

  # _
  regulatoryInteractions: detailedStatistics

  # _
  regulons: dbInfoRegulons

  # _
  riboswitches: detailedStatistics

  # _
  shineDalgarnos: detailedStatistics

  # _
  srnaInteractions: detailedStatistics

  # _
  synonyms: detailedStatistics

  # _
  terminators: detailedStatistics

  # _
  transcriptionFactors: detailedStatistics

  # _
  transcriptionUnits: detailedStatistics
}

# _
type Summary {
  # _
  bindingSites: SummaryObject

  # _
  genes: SummaryObject

  # _
  operons: SummaryObject

  # _
  regulatoryInteractions: SummaryObject

  # _
  sigmaFactors: SummaryObject

  # _
  transcriptionFactors: SummaryObject

  # _
  transcriptionUnits: SummaryObject
}

# _
type SummaryObject {
  # _
  activated: Int

  # _
  dual: Int

  # _
  repressed: Int

  # _
  total: Int

  # _
  unknown: Int
}

# _
type TFBCitations {
  # _
  evidence: TFBEvidence

  # _
  publication: TFBPublication
}

# _
type TFBEvidence {
  # _
  code: String

  # _
  id: String

  # _
  name: String

  # _
  type: String
}

# _
type TFBPublication {
  # _
  authors: [String]

  # _
  citation: String

  # _
  id: String

  # _
  pmid: String

  # _
  title: String

  # _
  url: String

  # _
  year: Int
}

# _
type TFClosestGenes {
  # _
  _id: String

  # _
  distanceTo: Float

  # _
  name: String

  # _
  transcriptionUnits: [simpleItemObject]
}

# _
type TFProducts {
  # _
  _id: String

  # _
  abbreviatedName: String

  # _
  name: String
}

# _
type TSSClosestGenes {
  # _
  _id: String

  # _
  distanceTo: Float

  # _
  name: String
}

# _
type TSSPromoter {
  # _
  _id: String

  # _
  confidenceLevel: String

  # _
  name: String

  # _
  pos1: Int

  # _
  sigma: String

  # _
  strand: String
}

# _
type TTSClosestGenes {
  # _
  _id: String

  # _
  distanceTo: Float

  # _
  name: String
}

# _
type TTSPromoter {
  # _
  _id: String

  # _
  leftEndPosition: Int

  # _
  name: String

  # _
  rightEndPosition: Int

  # _
  sequence: String

  # _
  strand: String
}

# _
type TTSTerminator {
  # _
  _id: String

  # _
  transcriptionUnits: [TTSTransUnit]
}

# _
type TTSTransUnit {
  # _
  _id: String

  # _
  name: String

  # _
  promoter: TTSPromoter
}

# _
type TUGenes {
  # _
  _id: String

  # _
  bnumber: String

  # _
  name: String
}

# _
type Terminators {
  # _
  _id: String

  # _
  additiveEvidences: [AdditiveEvidences]

  # _
  citations: [Citations]

  # _
  class: String

  # _
  confidenceLevel: String

  # _
  sequence: String

  # _
  transcriptionTerminationSite: TranscriptionTerminationSite
}

# _
type Terms {
  # _
  geneOntology: RegulonGeneOntology

  # _
  multifun: [RegulonMultifun]
}

# _
type TranscribedGenes {
  # _
  _id: String

  # _
  distanceFromTSS: Int

  # _
  name: String
}

# _
type TranscribedPromoters {
  # _
  TSSPosition: Int

  # _
  _id: String

  # _
  boxes: [Boxes]

  # _
  citations: [Citations]

  # _
  name: String

  # _
  operonId: String

  # _
  sequence: String

  # _
  strand: String

  # _
  transcribedGenes: [TranscribedGenes]
}

# _
type TranscriptionStartSite {
  # _
  leftEndPosition: Int

  # _
  range: Int

  # _
  rightEndPosition: Int

  # _
  type: String
}

# _
type TranscriptionTerminationSite {
  # _
  leftEndPosition: Int

  # _
  rightEndPosition: Int

  # _
  type: String
}

# _
type TranscriptionUnitStatistics {
  genes: Int
  sites: Int
  transcriptionFactors: Int
}

# _
type TranscriptionUnits {
  # _
  _id: String

  # _
  additiveEvidences: [AdditiveEvidences]

  # _
  citations: [Citations]

  # _
  confidenceLevel: String

  # _
  firstGene: FirstGene

  # _
  genes: [Genes]

  # _
  name: String

  # _
  note: String

  # _
  promoter: Promoter

  # _
  regulatorBindingSites: [RegulatorBindingSites]

  # _
  statistics: TranscriptionUnitStatistics

  # _
  synonyms: [String]

  # _
  terminators: [Terminators]
}

# _
type TusEncodingRegulator {
  # _
  promoterName: String

  # _
  transcriptionUnitName: String
}

# _
type authorsData {
  # _
  _id: String

  # _
  authorsData: String

  # _
  datasetIds: [String]
}

# Este es el type de dataType el cual  tiene la información para realizar la gráfica
type dataType {
  # objectRelated  contiene un arreglo de objetos los cuales debe contener para cada grupo de (x,y)
  objectsRelated: [objectsRelatedType]

  # xAxis es el valor numerico que se graficará en el eje x
  xAxis: Int

  # yAxis es el valor numérico que se graficará en el eje Y
  yAxis: Int
}

# _
type dbInfo {
  # _
  ecocycVersion: String

  # _
  genomeVersion: String

  # _
  lcVersion: String

  # _
  localData: [LocalDataType]

  # _
  note: String

  # _
  regulonDBVersion: String

  # _
  regulondbPMID: String

  # _
  releaseDate: String

  # _
  route: String

  # _
  statistics: StatisticsDBType
}

# _
type dbInfoExternalReferencesType {
  # _
  origin: detailedExtReferences

  # _
  total: Int
}

# _
type dbInfoRegulons {
  # _
  complexRegulons: detailedStatistics

  # _
  simpleRegulons: detailedStatistics

  # _
  total: Int
}

# _
type detailedExtReferences {
  # _
  expasy: Int

  # _
  genbank: Int

  # _
  geneprotec: Int

  # _
  medline: Int

  # _
  ouMicroArray: Int

  # _
  pdb: Int

  # _
  pir: Int

  # _
  swissprot: Int
}

# _
type detailedStatistics {
  # _
  confirmed: Int

  # _
  strong: Int

  # _
  total: Int

  # _
  weak: Int

  # _
  withEvidences: Int

  # _
  withPublications: Int

  # _
  withoutEvidences: Int

  # _
  withwithConfidenceLevel: Int
}

# This is a geneDatamart type
type geneDatamart {
  # _
  _id: String

  # _
  allCitations: [Citations]

  # _
  gene: Gene

  # _
  growthConditions: [GrowthConditions]

  # _
  organism: Organism

  # _
  products: [Products]

  # _
  regulation: Regulation

  # _
  schemaVersion: Float

  # _
  shineDalgarnos: [ShineDalgarnos]
}

# _
type geneMembers {
  # _
  _id: String

  # _
  name: String

  # _
  productName: String
}

# Este type contiene las variables que almacenan la información básica de las graficas
type graphType {
  # descrition contienela información básica para describir la gráfica
  description: String

  # footGraph contiene una breve información de la grafica
  footGraph: String

  # graphType contiene el nombre del tipo de gráfico que se hizo, ej. Barras
  graphType: String

  # labelX es el nombre para describir el eje X en la gráfica
  labelX: String

  # labelY es el nombre para describir el eje Y en la gráfica
  labelY: String

  # title contiene el nombre de la gráfica Ej. 'Number of promoters transcribing the gene'
  title: String
}

# _
type htDatasets {
  # _
  datasets: [Dataset]

  # _
  metadata: MetadataType
}

# linkedObjectsWhenNoPositionsType contains information of those elements without position
type linkedObjectWhenNoPositionsType {
  # id of the gene with no position
  _id: String

  # Position of the gen
  leftEndPosition: String

  # Name of the gene
  name: String

  # Position of the gene
  rightEndPosition: String

  # Direction of the element to draw
  strand: String

  # Type of the element
  type: String
}

type myType {
  created: Date
}

# _
type nlpGCAdditionalProperties {
  # _
  name: String

  # _
  value: [nlpGCProperties]
}

# _
type nlpGCProperties {
  # _
  associatedPhrase: String

  # _
  nameField: String

  # _
  score: Int

  # _
  value: String
}

# _
type objectTestedGene {
  # _
  _id: String

  # _
  name: String
}

#
type objectsRelatedType {
  # _ID contiene el idenficador de cada elemento que ha sido agrupado
  _id: String

  # name contiene el nombre de cada elemento que ha sido agrupado
  name: String

  # Indicates the object type (gene, product, etc.)
  type: String
}

# This is a operonDatamart Type
type operonDatamart {
  # _
  _id: String

  # _
  allCitations: [Citations]

  # _
  operon: Operon

  # _
  organism: Organism

  # _
  schemaVersion: Float

  # _
  transcriptionUnits: [TranscriptionUnits]
}

# OrganismType contains the information of the organism
type organismType {
  # id of the organism type
  _id: String

  # Name of the organism type
  name: String
}

# Este es el type de overviews con toda la estructura del overview que se mostrará
type overviewInfoType {
  # _id es de tipo string y es el identificador de los overviews que existen en la colección
  _id: String

  # Contiene los datos agrupados dentro de la colección que se almacenan en un arreglo de objetos
  data: [dataType]

  # graph Contiene las variables y tipos de datos de la información básica del objeto padre que se va a graficar
  graph: graphType

  # Es el nombre del objeto padre ej. GENE
  objectType: String

  # queryName Es el nombre de la consulta
  queryName: String
}

type productsDBInfoType {
  # _
  polypeptides: detailedStatistics

  # _
  rnas: detailedStatistics

  # _
  srna: detailedStatistics
}

type propertyPhrases {
  associatedPhrases: [AssociatedPhrases]
  associatedProperty: [AssociatedProperty]
  position: Int
}

type recentQuery {
  _id: String
  dateOfUse: Date
  querySearchString: String
  usedTimes: Int
}

# _
type regulationOperon {
  # _
  _id: String

  # _
  arrangement: [Arrangement]

  # _
  name: String
}

type regulonList {
  # _
  _id: String

  # _
  datamartType: String

  # _
  encodedGenes: [String]

  # _
  name: String

  # _
  productsName: [String]

  # _
  sigmulonGeneName: String

  # _
  statistics: ListServiceStatistics

  # _
  summary: SrnaSummary

  # _
  synonyms: [String]
}

# RelatedGenesType contains the information of those elements that are related with th principal genes
type relatedGenesType {
  # id of the related gene
  _id: String

  # efect of the gene
  effect: String

  # Color to draw of the gene
  objectRGBColor: String

  # Direction of the gene
  strand: String

  # Description of the gene
  tooltip: String
}

# _
type simpleItemObject {
  # _
  _id: String

  # _
  distanceTo: Int

  # _
  name: String
}

type simpleType {
  # _
  _id: String

  # _
  name: String
}

# _
type totalOf {
  # _
  inDataset: Int

  # _
  inRDBClassic: Int

  # _
  notInDataset: Int

  # _
  notInRDB: Int

  # _
  sharedItems: Int
}
